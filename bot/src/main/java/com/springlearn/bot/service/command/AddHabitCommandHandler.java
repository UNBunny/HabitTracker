package com.springlearn.bot.service.command;


import com.springlearn.bot.client.BackendClient;
import com.springlearn.bot.dto.HabitRequestDto;
import com.springlearn.bot.dto.HabitResponseDto;
import com.springlearn.bot.dto.UserDto;
import com.springlearn.bot.state.HabitCache;
import com.springlearn.bot.state.UserState;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
public class AddHabitCommandHandler implements CommandHandler {

    @Autowired
    private BackendClient backendClient;
    @Autowired
    private HabitCache habitCache;
    private final Map<Long, UserState> userStateMap = new HashMap<>();


    @Override
    public boolean canHandle(String commandName) {
        return commandName.startsWith("/addHabit");
    }

    @Override
    public String handle(long chatId, String messageText) {
        userStateMap.put(chatId, UserState.AWAITING_HABIT_NAME);
        return "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:";
    }


    @Override
    public String handleUserInput(long chatId, String messageText) {
        UserState userState = userStateMap.getOrDefault(chatId, UserState.IDLE);

        switch (userState) {
            case AWAITING_HABIT_NAME:
                HabitRequestDto habitRequestDto = new HabitRequestDto();
                habitRequestDto.setName(messageText);
                habitCache.putHabitData(chatId, habitRequestDto);
                userStateMap.put(chatId, UserState.AWAITING_HABIT_DESCRIPTION);
                return "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: ";

            case AWAITING_HABIT_DESCRIPTION:
                HabitRequestDto habitWithName = habitCache.getHabitData(chatId);
                habitWithName.setDescription(messageText);
                habitCache.putHabitData(chatId, habitWithName);
                userStateMap.put(chatId, UserState.AWAITING_HABIT_CATEGORY);
                return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏–≤—ã—á–∫–∏:\n1: –ó–¥–æ—Ä–æ–≤—å–µ\n2: –°–ø–æ—Ä—Ç\n3: –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ";

            case AWAITING_HABIT_CATEGORY:
                HabitRequestDto habitWithNameAndDescription = habitCache.getHabitData(chatId);
                log.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {}", messageText);
                try {
                    habitWithNameAndDescription.setCategoryId(Long.parseLong(messageText));
                } catch (NumberFormatException e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {}", messageText, e);
                    return "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2 –∏–ª–∏ 3).";
                }
                habitCache.putHabitData(chatId, habitWithNameAndDescription);
                userStateMap.put(chatId, UserState.AWAITING_HABIT_FREQUENCY);

                return "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:\nDAILY, WEEKLY OR MONTHLY";

            case AWAITING_HABIT_FREQUENCY:

                HabitRequestDto habitWithCategory = habitCache.getHabitData(chatId);

                habitWithCategory.setFrequency(messageText);

                UserDto userDto = backendClient.getUserByTelegramChatId(chatId);
                if (userDto == null || userDto.getId() == null) {
                    return "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.";
                }
                habitWithCategory.setUserId(userDto.getId());
                HabitResponseDto savedHabit = backendClient.addHabit(habitWithCategory);
                // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                userStateMap.put(chatId, UserState.IDLE);
                habitCache.clearHabitData(chatId);

//                log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–≤—ã—á–∫—É: {}", habitWithCategory.getName());

                return formatHabitMessage(savedHabit);

            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞.";
        }
    }

    private String formatHabitMessage(HabitResponseDto habit) {
//        log.debug(habit.toString());
        return String.format(
                "‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n" +
                        "üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n" +
                        "üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n" +
                        "üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n" +
                        "‚è≥ *–ß–∞—Å—Ç–æ—Ç–∞:* %s",
                habit.getName(),
                habit.getDescription(),
                habit.getCategory(),// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                habit.getFrequency()
        );
    }

}

